$OpenBSD: patch-base_threading_platform_thread_posix_cc,v 1.5 2013/09/29 19:04:00 robert Exp $
--- base/threading/platform_thread_posix.cc.orig.port	Sat Sep 28 13:03:29 2013
+++ base/threading/platform_thread_posix.cc	Sat Sep 28 13:58:26 2013
@@ -21,8 +21,7 @@
 #include <algorithm>
 #endif
 
-#if defined(OS_LINUX)
-#include <sys/prctl.h>
+#if defined(OS_LINUX) || defined(OS_BSD)
 #include <sys/resource.h>
 #include <sys/syscall.h>
 #include <sys/time.h>
@@ -30,6 +29,25 @@
 #endif
 
 namespace base {
+int ThreadNiceValue(ThreadPriority priority) {
+  static const int threadPriorityAudio = -10;
+  static const int threadPriorityBackground = 10;
+  static const int threadPriorityDefault = 0;
+  static const int threadPriorityDisplay = -6;
+  switch (priority) {
+    case kThreadPriority_RealtimeAudio:
+      return threadPriorityAudio;
+    case kThreadPriority_Background:
+      return threadPriorityBackground;
+    case kThreadPriority_Normal:
+      return threadPriorityDefault;
+    case kThreadPriority_Display:
+      return threadPriorityDisplay;
+    default:
+      NOTREACHED() << "Unknown priority.";
+      return 0;
+  }
+}
 
 void InitThreading();
 void InitOnThread();
@@ -226,6 +244,53 @@ void PlatformThread::Join(PlatformThreadHandle thread_
   // blocking tasks.
   base::ThreadRestrictions::AssertIOAllowed();
   pthread_join(thread_handle.handle_, NULL);
+}
+
+// static
+void PlatformThread::SetName(const char* name) {
+  ThreadIdNameManager::GetInstance()->SetName(CurrentId(), name);
+  tracked_objects::ThreadData::InitializeThreadContext(name);
+}
+
+void InitThreading() {
+}
+
+void InitOnThread() {
+}
+
+void TerminateOnThread() {
+}
+
+// static
+void PlatformThread::SetThreadPriority(PlatformThreadHandle handle,
+                                       ThreadPriority priority) {
+#if !defined(OS_NACL)
+  if (priority == kThreadPriority_RealtimeAudio) {
+    const int kRealTimePrio = 8;
+
+    struct sched_param sched_param;
+    memset(&sched_param, 0, sizeof(sched_param));
+    sched_param.sched_priority = kRealTimePrio;
+
+    if (pthread_setschedparam(pthread_self(), SCHED_RR, &sched_param) == 0) {
+      // Got real time priority, no need to set nice level.
+      return;
+    }
+  }
+
+  // setpriority(2) will set a thread's priority if it is passed a tid as
+  // the 'process identifier', not affecting the rest of the threads in the
+  // process. Setting this priority will only succeed if the user has been
+  // granted permission to adjust nice values on the system.
+  DCHECK_NE(handle.id_, kInvalidThreadId);
+  int kNiceSetting = ThreadNiceValue(priority);
+  if (setpriority(PRIO_PROCESS, handle.id_, kNiceSetting))
+    LOG(ERROR) << "Failed to set nice value of thread to " << kNiceSetting;
+#endif  // !OS_NACL
+}
+
+size_t GetDefaultThreadStackSize(const pthread_attr_t& attributes) {
+  return 0;
 }
 
 }  // namespace base

$OpenBSD: patch-src_calibre_ebooks_pdf_reflow_cpp,v 1.3 2013/08/15 18:42:03 kili Exp $
--- src/calibre/ebooks/pdf/reflow.cpp.orig	Fri Sep 23 19:14:20 2011
+++ src/calibre/ebooks/pdf/reflow.cpp	Wed Aug  7 20:20:35 2013
@@ -625,7 +625,7 @@ static string get_link_dest(LinkAction *link, PDFDoc *
   return oss.str();
 }
 
-void XMLOutputDev::process_link(Link* link){
+void XMLOutputDev::process_link(AnnotLink* link){
   double _x1, _y1, _x2, _y2;
   int x1, y1, x2, y2;
   
@@ -646,7 +646,7 @@ void XMLOutputDev::process_link(Link* link){
 
 
 void XMLOutputDev::endPage() {
-    Links *slinks = catalog->getPage(current_page->number())->getLinks(catalog);
+    Links *slinks = catalog->getPage(current_page->number())->getLinks();
     for (int i = 0; i < slinks->getNumLinks(); i++)
     {
         this->process_link(slinks->getLink(i));
@@ -877,8 +877,8 @@ vector<char>* Reflow::render_first_page(bool use_crop_
         throw ReflowException("Failed to allocate SplashOutputDev");
     }
     try {
-        out->startDoc(doc->getXRef());
-        out->startPage(1, NULL);
+        out->startDoc(doc);
+        out->startPage(1, NULL, doc->getXRef());
 
         double pg_w, pg_h;
         int pg = 1;
@@ -921,7 +921,7 @@ class MemOutStream : public OutStream {
         MemOutStream() :OutStream() {}
         ~MemOutStream() {}
         void close() {}
-        int getPos() { return out.tellp(); }
+        Goffset getPos() { return out.tellp(); }
         void put(char c) { out.put(c); }
         void printf (const char *format, ...) {
             vector<char> buf;

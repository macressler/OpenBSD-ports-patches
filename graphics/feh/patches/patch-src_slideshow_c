$OpenBSD: patch-src_slideshow_c,v 1.7 2013/05/20 07:56:48 dcoppa Exp $

commit 27a1fb87555b40e0ad4d0f24640801dd527ed4a4
Author: Daniel Friesel <derf@finalrewind.org>
Date:   Thu May 9 20:59:02 2013 +0200

Fix feh_printf buffer overflows

--- src/slideshow.c.orig	Mon May 20 09:30:12 2013
+++ src/slideshow.c	Mon May 20 09:39:04 2013
@@ -476,107 +476,107 @@ char *feh_printf(char *str, feh_file * file, winwidget
 			switch (*c) {
 			case 'f':
 				if (file)
-					strcat(ret, file->filename);
+					strncat(ret, file->filename, sizeof(ret) - strlen(ret));
 				break;
 			case 'F':
 				if (file)
-					strcat(ret, shell_escape(file->filename));
+					strncat(ret, shell_escape(file->filename), sizeof(ret) - strlen(ret));
 				break;
 			case 'h':
 				if (file && (file->info || !feh_file_info_load(file, NULL))) {
 					snprintf(buf, sizeof(buf), "%d", file->info->height);
-					strcat(ret, buf);
+					strncat(ret, buf, sizeof(ret) - strlen(ret));
 				}
 				break;
 			case 'l':
 				snprintf(buf, sizeof(buf), "%d", gib_list_length(filelist));
-				strcat(ret, buf);
+				strncat(ret, buf, sizeof(ret) - strlen(ret));
 				break;
 			case 'm':
-				strcat(ret, mode);
+				strncat(ret, mode, sizeof(ret) - strlen(ret));
 				break;
 			case 'n':
 				if (file)
-					strcat(ret, file->name);
+					strncat(ret, file->name, sizeof(ret) - strlen(ret));
 				break;
 			case 'N':
 				if (file)
-					strcat(ret, shell_escape(file->name));
+					strncat(ret, shell_escape(file->name), sizeof(ret) - strlen(ret));
 				break;
 			case 'o':
 				if (winwid) {
 					snprintf(buf, sizeof(buf), "%d,%d", winwid->im_x,
 						winwid->im_y);
-					strcat(ret, buf);
+					strncat(ret, buf, sizeof(ret) - strlen(ret));
 				}
 				break;
 			case 'p':
 				if (file && (file->info || !feh_file_info_load(file, NULL))) {
 					snprintf(buf, sizeof(buf), "%d", file->info->pixels);
-					strcat(ret, buf);
+					strncat(ret, buf, sizeof(ret) - strlen(ret));
 				}
 				break;
 			case 'P':
 				if (file && (file->info || !feh_file_info_load(file, NULL))) {
-					strcat(ret, format_size(file->info->pixels));
+					strncat(ret, format_size(file->info->pixels), sizeof(ret) - strlen(ret));
 				}
 				break;
 			case 'r':
 				if (winwid) {
 					snprintf(buf, sizeof(buf), "%.1f", winwid->im_angle);
-					strcat(ret, buf);
+					strncat(ret, buf, sizeof(ret) - strlen(ret));
 				}
 				break;
 			case 's':
 				if (file && (file->info || !feh_file_info_load(file, NULL))) {
 					snprintf(buf, sizeof(buf), "%d", file->info->size);
-					strcat(ret, buf);
+					strncat(ret, buf, sizeof(ret) - strlen(ret));
 				}
 				break;
 			case 'S':
 				if (file && (file->info || !feh_file_info_load(file, NULL))) {
-					strcat(ret, format_size(file->info->size));
+					strncat(ret, format_size(file->info->size), sizeof(ret) - strlen(ret));
 				}
 				break;
 			case 't':
 				if (file && (file->info || !feh_file_info_load(file, NULL))) {
-					strcat(ret, file->info->format);
+					strncat(ret, file->info->format, sizeof(ret) - strlen(ret));
 				}
 				break;
 			case 'u':
 				snprintf(buf, sizeof(buf), "%d",
 					 current_file != NULL ? gib_list_num(filelist, current_file)
 					 + 1 : 0);
-				strcat(ret, buf);
+				strncat(ret, buf, sizeof(ret) - strlen(ret));
 				break;
 			case 'v':
-				strcat(ret, VERSION);
+				strncat(ret, VERSION, sizeof(ret) - strlen(ret));
 				break;
 			case 'V':
 				snprintf(buf, sizeof(buf), "%d", getpid());
-				strcat(ret, buf);
+				strncat(ret, buf, sizeof(ret) - strlen(ret));
 				break;
 			case 'w':
 				if (file && (file->info || !feh_file_info_load(file, NULL))) {
 					snprintf(buf, sizeof(buf), "%d", file->info->width);
-					strcat(ret, buf);
+					strncat(ret, buf, sizeof(ret) - strlen(ret));
 				}
 				break;
 			case 'z':
 				if (winwid) {
 					snprintf(buf, sizeof(buf), "%.2f", winwid->zoom);
-					strcat(ret, buf);
+					strncat(ret, buf, sizeof(ret) - strlen(ret));
 				}
 				break;
 			case '%':
-				strcat(ret, "%");
+				strncat(ret, "%", sizeof(ret) - strlen(ret));
 				break;
 			default:
 				weprintf("Unrecognized format specifier %%%c", *c);
 				strncat(ret, c - 1, 2);
 				break;
 			}
-		} else if ((*c == '\\') && (*(c+1) != '\0')) {
+		} else if ((*c == '\\') && (*(c+1) != '\0') && ((strlen(ret) + 3) < sizeof(ret))) {
 			c++;
 			switch (*c) {
 			case 'n':
@@ -586,7 +586,7 @@ char *feh_printf(char *str, feh_file * file, winwidget
 				strncat(ret, c - 1, 2);
 				break;
 			}
-		} else
+		} else if ((strlen(ret) + 2) < sizeof(ret))
 			strncat(ret, c, 1);
 	}
 	return(ret);

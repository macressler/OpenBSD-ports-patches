$OpenBSD: patch-src_GNS3_Config_Defaults_py,v 1.2 2012/06/08 09:16:32 sthen Exp $
--- src/GNS3/Config/Defaults.py.orig	Wed Mar 14 02:12:51 2012
+++ src/GNS3/Config/Defaults.py	Wed May 23 00:29:02 2012
@@ -31,6 +31,8 @@ elif sys.platform.startswith('darwin'):
         DYNAMIPS_DEFAULT_PATH = os.getcwdu() + os.sep + '../Resources/dynamips-0.2.8-RC3-community-OSX.intel64.bin'
     else:
         DYNAMIPS_DEFAULT_PATH = os.getcwdu() + os.sep + 'dynamips-0.2.8-RC3-community-OSX.intel64.bin'
+elif sys.platform.startswith('openbsd'):
+    DYNAMIPS_DEFAULT_PATH = unicode('${LOCALBASE}/bin/dynamips')
 else:
     DYNAMIPS_DEFAULT_PATH = unicode('dynamips')
 
@@ -47,6 +49,8 @@ if sys.platform.startswith('win'):
     QEMUWRAPPER_DEFAULT_PATH = unicode('qemuwrapper.exe')
 elif sys.platform.startswith('darwin') and hasattr(sys, "frozen"):
     QEMUWRAPPER_DEFAULT_PATH = os.getcwdu() + os.sep + '../Resources/qemuwrapper.py'
+elif sys.platform.startswith('openbsd'):
+    QEMUWRAPPER_DEFAULT_PATH = unicode('${LOCALBASE}/libexec/gns3/qemuwrapper.py')
 else:
     # look for qemuwrapper in the current working directory
     qemuwrapper_path = os.getcwdu() + os.sep + 'qemuwrapper/qemuwrapper.py'
@@ -68,10 +72,12 @@ if sys.platform.startswith('win'):
     VBOXWRAPPER_DEFAULT_PATH = unicode('vboxwrapper.exe')
 elif sys.platform.startswith('darwin') and hasattr(sys, "frozen"):
     VBOXWRAPPER_DEFAULT_PATH = os.getcwdu() + os.sep + '../Resources/vboxwrapper.py'
+elif sys.platform.startswith('openbsd'):
+    VBOXWRAPPER_DEFAULT_PATH = unicode('${LOCALBASE}/libexec/gns3/vboxwrapper.py')
 else:
     # look for vboxwrapper in the current working directory
     vboxwrapper_path = os.getcwdu() + os.sep + 'vboxwrapper/vboxwrapper.py'
-    if os.path.exists(qemuwrapper_path):
+    if os.path.exists(vboxwrapper_path):
         VBOXWRAPPER_DEFAULT_PATH = vboxwrapper_path
     else:
         VBOXWRAPPER_DEFAULT_PATH = unicode("/usr/local/libexec/gns3/vboxwrapper.py")
@@ -155,7 +161,7 @@ if platform.system() == 'Linux' or platform.system()._
                             'xterm (Linux/BSD)': 'xterm -T %d -e \'telnet %h %p\' >/dev/null 2>&1 &',
                             'Putty (Linux/BSD)': 'putty -telnet %h %p',
                             'Gnome Terminal (Linux/BSD)': 'gnome-terminal -t %d -e \'telnet %h %p\' >/dev/null 2>&1 &',
-                            'KDE Konsole (Linux/BSD)': '/usr/bin/konsole --new-tab -p tabtitle=%d -e telnet %h %p >/dev/null 2>&1 &'
+                            'KDE Konsole (Linux/BSD)': 'konsole --new-tab -p tabtitle=%d -e telnet %h %p >/dev/null 2>&1 &'
                             }
 elif platform.system() == 'Windows'  and os.path.exists("C:\Program Files (x86)\\"):
     TERMINAL_PRESET_CMDS = {

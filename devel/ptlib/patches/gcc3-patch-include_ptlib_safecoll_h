$OpenBSD: gcc3-patch-include_ptlib_safecoll_h,v 1.2 2011/10/26 16:59:09 ajacoutot Exp $

Make this build on gcc3.
(revert commit from upstream SVN)

--- include/ptlib/safecoll.h.orig	Fri May  7 06:42:29 2010
+++ include/ptlib/safecoll.h	Sat Jun 26 16:40:52 2010
@@ -767,7 +767,7 @@ template <class T, class BaseClass = PSafePtrBase> cla
       */
     PSafePtr & operator=(const PSafeCollection & safeCollection)
       {
-        BaseClass::Assign(safeCollection);
+        Assign(safeCollection);
         return *this;
       }
 
@@ -803,7 +803,7 @@ template <class T, class BaseClass = PSafePtrBase> cla
      */
     PSafePtr & operator=(PINDEX idx)
       {
-        BaseClass::Assign(idx);
+        Assign(idx);
         return *this;
       }
   //@}
@@ -812,15 +812,15 @@ template <class T, class BaseClass = PSafePtrBase> cla
   //@{
     /**Return the physical pointer to the object.
       */
-    operator T*()    const { return  (T *)BaseClass::currentObject; }
+    operator T*()    const { return  (T *)currentObject; }
 
     /**Return the physical pointer to the object.
       */
-    T & operator*()  const { return *(T *)PAssertNULL(BaseClass::currentObject); }
+    T & operator*()  const { return *(T *)PAssertNULL(currentObject); }
 
     /**Allow access to the physical object the pointer is pointing to.
       */
-    T * operator->() const { return  (T *)PAssertNULL(BaseClass::currentObject); }
+    T * operator->() const { return  (T *)PAssertNULL(currentObject); }
 
     /**Post-increment the pointer.
        This requires that the pointer has been created with a PSafeCollection
@@ -828,8 +828,8 @@ template <class T, class BaseClass = PSafePtrBase> cla
       */
     T * operator++(int)
       {
-        T * previous = (T *)BaseClass::currentObject;
-        BaseClass::Next();
+        T * previous = (T *)currentObject;
+        Next();
         return previous;
       }
 
@@ -839,8 +839,8 @@ template <class T, class BaseClass = PSafePtrBase> cla
       */
     T * operator++()
       {
-        BaseClass::Next();
-        return (T *)BaseClass::currentObject;
+        Next();
+        return (T *)currentObject;
       }
 
     /**Post-decrement the pointer.
@@ -849,8 +849,8 @@ template <class T, class BaseClass = PSafePtrBase> cla
       */
     T * operator--(int)
       {
-        T * previous = (T *)BaseClass::currentObject;
-        BaseClass::Previous();
+        T * previous = (T *)currentObject;
+        Previous();
         return previous;
       }
 
@@ -860,8 +860,8 @@ template <class T, class BaseClass = PSafePtrBase> cla
       */
     T * operator--()
       {
-        BaseClass::Previous();
-        return (T *)BaseClass::currentObject;
+        Previous();
+        return (T *)currentObject;
       }
   //@}
 

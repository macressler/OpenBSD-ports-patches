$OpenBSD: patch-doc_fr_french-deconjugator_1_in,v 1.1 2012/08/09 18:22:16 naddy Exp $
--- doc/fr/french-deconjugator.1.in.orig	Sun Jul  4 19:06:34 2010
+++ doc/fr/french-deconjugator.1.in	Thu Aug  9 20:11:11 2012
@@ -21,15 +21,14 @@
 .\"
 .TH french-deconjugator "1" "@MANUAL_DATE_FR@" "" ""
 .SH NOM
-french-deconjugator - analyse un verbe français conjugué
+french-deconjugator - analyse un verbe fran\(,cais conjugu\('e
 .SH SYNOPSIS
-.B echo aimé | french-deconjugator > result.txt
+.B echo aim\('e | french-deconjugator > result.txt
 .SH DESCRIPTION
-.PP
 \fBfrench-deconjugator\fR
-lit des verbes français conjugués
-de la ligne de commande ou de l'entrée standard
-et écrit (dans sa sortie standard)
+lit des verbes fran\(,cais conjugu\('es
+de la ligne de commande ou de l'entr\('ee standard
+et \('ecrit (dans sa sortie standard)
 la forme infinitive,
 le mode (mots-clefs anglais: 
 infinitive, indicative, conditional, subjunctive,
@@ -37,79 +36,77 @@ imperative ou participle),
 le temps (mots clefs anglais:
 present, past, imperfect, future),
 la personne (1, 2 ou 3,
-tandis que 0 est utilisé pour le participe présent
-et 4 et 5 sont utilisés pour le participe passé),
+tandis que 0 est utilis\('e pour le participe pr\('esent
+et 4 et 5 sont utilis\('es pour le participe pass\('e),
 et
 le nombre (mots-clefs anglais: 
 singular or plural).
-Ces champs sont séparés par une virgule et un espace.
+Ces champs sont s\('epar\('es par une virgule et un espace.
 .PP
-L'entrée standard n'est pas lue si des verbes sont passés sur la
+L'entr\('ee standard n'est pas lue si des verbes sont pass\('es sur la
 ligne de commande.
 .PP
-Par convention, les personnes 4 et 5 sont utilisées au
-\fBparticipe passé\fR
+Par convention, les personnes 4 et 5 sont utilis\('ees au
+\fBparticipe pass\('e\fR
 pour indiquer le genre:
-4 signifie masculin (e.g., "aimé" ou "aimés"),
-et 5 signifie féminin (e.g., "aimée" ou "aimées").
+4 signifie masculin (e.g., "aim\('e" ou "aim\('es"),
+et 5 signifie f\('eminin (e.g., "aim\('ee" ou "aim\('ees").
 .PP
-Une forme conjuguée peut correspondre à plus d'un mode, temps et personne.
-Dans ce cas, chaque alternative est écrite sur sa propre ligne.
+Une forme conjugu\('ee peut correspondre \(`a plus d'un mode, temps et personne.
+Dans ce cas, chaque alternative est \('ecrite sur sa propre ligne.
 .PP
-Dans tous les cas, la fin de la réponse est marquée par une ligne vide.
-Si le mot était inconnu, seule cette ligne vide est écrite.
+Dans tous les cas, la fin de la r\('eponse est marqu\('ee par une ligne vide.
+Si le mot \('etait inconnu, seule cette ligne vide est \('ecrite.
 Les noms des modes, temps et nombres sont toujours en anglais.
-(Ceci sert à faciliter le parsing du résultat.
-Pour une interface-usager en français, voir l'application et l'applet GNOME.)
+(Ceci sert \(`a faciliter le parsing du r\('esultat.
+Pour une interface-usager en fran\(,cais, voir l'application et l'applet GNOME.)
 .PP
-La commande écoule son tampon d'écriture après avoir fini chaque réponse.
-Ceci permet à la commande d'être facilement appelée à partir d'un autre
-programme via deux «pipes.»
+La commande \('ecoule son tampon d'\('ecriture apr\(`es avoir fini chaque r\('eponse.
+Ceci permet \(`a la commande d'\(^etre facilement appel\('ee \(`a partir d'un autre
+programme via deux \(Fopipes\(Fc.
 .PP
-La commande commence par charger sa base de données à partir de fichiers XML
-(situés typiquement dans /usr/share/verbiste).
-Ceci prend un certain temps, alors c'est une bonne idée de faire répondre
-la commande à plusieurs requêtes plutôt que de l'exécuter pour chaque requête.
+La commande commence par charger sa base de donn\('ees \(`a partir de fichiers XML
+(situ\('es typiquement dans /usr/share/verbiste).
+Ceci prend un certain temps, alors c'est une bonne id\('ee de faire r\('epondre
+la commande \(`a plusieurs requ\(^etes plut\(^ot que de l'ex\('ecuter pour chaque requ\(^ete.
 .PP
 L'archive des sources de la librairie verbiste contient des exemples
 de programmes en Perl et en Java qui illustrent cette technique.
 .PP
-Cette commande s'attend à lire des caractères Latin-1 et écrit
-des caractères Latin-1.
-Il ne doit pas y avoir de caractères blancs au début ou à la fin 
+Cette commande s'attend \(`a lire des caract\(`eres Latin-1 et \('ecrit
+des caract\(`eres Latin-1.
+Il ne doit pas y avoir de caract\(`eres blancs au d\('ebut ou \(`a la fin 
 des lignes lues par la commande.
 .SH OPTIONS
-.PP
 .TP
 \fB\-\-help\fR
 afficher une page d'aide et quitter
 .TP
 \fB\-\-version\fR
-afficher le numéro de version et quitter
+afficher le num\('ero de version et quitter
 .TP
 \fB\-\-lang=L\fR
-sélectionne la langue à utiliser
-(\fBfr\fR pour le français ou \fBit\fR pour l'italien);
-le français est la langue par défaut
+s\('electionne la langue \(`a utiliser
+(\fBfr\fR pour le fran\(,cais ou \fBit\fR pour l'italien);
+le fran\(,cais est la langue par d\('efaut
 .TP
 \fB\-\-utf8\fR
-supposer que le terminal utilise l'encodage UTF-8 plutôt que Latin-1
+supposer que le terminal utilise l'encodage UTF-8 plut\(^ot que Latin-1
 (ISO-8859-1) --
-essayer cette option si Verbiste affirme ne pas connaître un verbe qui
-contient un caractère accentué
+essayer cette option si Verbiste affirme ne pas conna\(^itre un verbe qui
+contient un caract\(`ere accentu\('e
 .TP
 \fB\-\-all-infinitives\fR
 print the infinitive form of all the verbs in the knowledge base,
 one per line, unsorted -- other command-line arguments are ignored
-.PP
 .SH EXEMPLES
-$ french-deconjugator aimé
+$ french-deconjugator aim\('e
 .br
 aimer, participle, past, 0, singular
 .br
 
 .br
-$ echo \-ne 'a\\nplu\\nété\\n' | french-deconjugator
+$ echo \-ne 'a\enplu\en\('et\('e\en' | french-deconjugator
 .br
 avoir, indicative, present, 3, singular
 
@@ -120,7 +117,7 @@ pleuvoir, participle, past, 0, singular
 .br
 
 .br
-être, participle, past, 0, singular
+\(^etre, participle, past, 0, singular
 .br
 
 .br

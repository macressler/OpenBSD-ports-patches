$OpenBSD: patch-include_i3status_h,v 1.8 2012/10/16 10:40:21 jasper Exp $

From ae4873bac793245e7dea4719c8e0d1c7bc990d5f Mon Sep 17 00:00:00 2001
From: Jasper Lievisse Adriaanse <jasper@openbsd.org>
Date: Wed, 10 Oct 2012 07:57:32 +0000
Subject: i3status - More temperature related fixes for OpenBSD, and a general feature

From 1c2517a3998385dbfca0559aca3ba7e72b5c216c Mon Sep 17 00:00:00 2001
From: Jasper Lievisse Adriaanse <jasper@openbsd.org>
Date: Wed, 10 Oct 2012 07:53:34 +0000
Subject: i3status - Default to acpitz(4) instead of cpu(4) for OpenBSD temperature readings

--- include/i3status.h.orig	Wed Oct  3 13:44:44 2012
+++ include/i3status.h	Tue Oct  9 20:36:02 2012
@@ -27,14 +27,8 @@ enum { O_DZEN2, O_XMOBAR, O_I3BAR, O_NONE } output_for
 #define BATT_STATE "hw.acpi.battery.state"
 
 #elif defined(__OpenBSD__)
-/*
- * Due to the fact there are various ways to obtain a temperature reading, THERMAL_ZONE will need
- * to be adjustable enough for those situations. As it can either be hw.sensors.cpu%d.temp0, or
- * hw.sensors.acpitz%d.temp0 or even something different entirely within hw.sensors.%s.temp0.
- * XXX: For now just check cpu%d.temp0. Adjust this later.
- */
-#define THERMAL_ZONE "cpu%d"
-
+/* Default to acpitz(4) if no path is set. */
+#define THERMAL_ZONE "acpitz%d"
 #endif
 
 #if defined(__FreeBSD_kernel__) && defined(__GLIBC__)
@@ -143,7 +137,7 @@ void print_ddate(yajl_gen json_gen, char *buffer, cons
 const char *get_ip_addr();
 void print_wireless_info(yajl_gen json_gen, char *buffer, const char *interface, const char *format_up, const char *format_down);
 void print_run_watch(yajl_gen json_gen, char *buffer, const char *title, const char *pidfile, const char *format);
-void print_cpu_temperature_info(yajl_gen json_gen, char *buffer, int zone, const char *path, const char *format);
+void print_cpu_temperature_info(yajl_gen json_gen, char *buffer, int zone, const char *path, const char *format, int);
 void print_cpu_usage(yajl_gen json_gen, char *buffer, const char *format);
 void print_eth_info(yajl_gen json_gen, char *buffer, const char *interface, const char *format_up, const char *format_down);
 void print_load(yajl_gen json_gen, char *buffer, const char *format);

$OpenBSD: patch-bus_dir-watch-kqueue_c,v 1.5 2014/01/06 17:36:33 ajacoutot Exp $

From 653790c9858180baf4259b38c7c9d5196e39114b Mon Sep 17 00:00:00 2001
From: Chengwei Yang <chengwei.yang@intel.com>
Date: Sun, 01 Dec 2013 11:40:21 +0000
Subject: kqueue: replace tab with space

From 4e8032be4e6608163757b2ab926e44e5f784807d Mon Sep 17 00:00:00 2001
From: Chengwei Yang <chengwei.yang@intel.com>
Date: Tue, 03 Dec 2013 12:47:54 +0000
Subject: Fix memory leak for kqueue: shutdown kqueue correctly

From f4618906b0dce251cdc3125b60239f7dd0df7183 Mon Sep 17 00:00:00 2001
From: Chengwei Yang <chengwei.yang@intel.com>
Date: Mon, 02 Dec 2013 04:47:47 +0000
Subject: kqueue: open watched directories with close-on-exec flag

--- bus/dir-watch-kqueue.c.orig	Mon Jan  6 17:52:11 2014
+++ bus/dir-watch-kqueue.c	Mon Jan  6 17:52:14 2014
@@ -73,12 +73,12 @@ _handle_kqueue_watch (DBusWatch *watch, unsigned int f
     {
       kq = -1;
       if (watch != NULL)
-	{
-	  _dbus_loop_remove_watch (loop, watch);
+        {
+          _dbus_loop_remove_watch (loop, watch);
           _dbus_watch_invalidate (watch);
           _dbus_watch_unref (watch);
-	  watch = NULL;
-	}
+          watch = NULL;
+        }
       pid = getpid ();
       _dbus_verbose ("Sending SIGHUP signal since kqueue has been closed\n");
       (void) kill (pid, SIGHUP);
@@ -87,11 +87,49 @@ _handle_kqueue_watch (DBusWatch *watch, unsigned int f
   return TRUE;
 }
 
+static void _shutdown_kqueue (void *data)
+{
+  int i;
+
+  if (kq < 0)
+    return;
+
+  for (i = 0; i < MAX_DIRS_TO_WATCH; i++)
+    {
+      if (fds[i] >= 0)
+        {
+          close (fds[i]);
+          fds[i] = -1;
+        }
+      if (dirs[i] != NULL)
+        {
+          /* dbus_free() is necessary to pass memleak check */
+          dbus_free (dirs[i]);
+          dirs[i] = NULL;
+        }
+    }
+
+  if (loop)
+    {
+      _dbus_loop_remove_watch (loop, watch);
+      _dbus_loop_unref (loop);
+      loop = NULL;
+    }
+
+  if (watch)
+    {
+      _dbus_watch_invalidate (watch);
+      _dbus_watch_unref (watch);
+      watch = NULL;
+    }
+
+    close (kq);
+    kq = -1;
+}
+
 static int
 _init_kqueue (BusContext *context)
 {
-  int ret = 0;
-
   if (kq < 0)
     {
 
@@ -99,38 +137,61 @@ _init_kqueue (BusContext *context)
       if (kq < 0)
         {
           _dbus_warn ("Cannot create kqueue; error '%s'\n", _dbus_strerror (errno));
-	  goto out;
-	}
+          goto out;
+        }
 
-        loop = bus_context_get_loop (context);
+      loop = bus_context_get_loop (context);
+      _dbus_loop_ref (loop);
 
-        watch = _dbus_watch_new (kq, DBUS_WATCH_READABLE, TRUE,
-                                 _handle_kqueue_watch, NULL, NULL);
+      watch = _dbus_watch_new (kq, DBUS_WATCH_READABLE, TRUE,
+                               _handle_kqueue_watch, NULL, NULL);
 
-	if (watch == NULL)
-          {
-            _dbus_warn ("Unable to create kqueue watch\n");
-	    close (kq);
-	    kq = -1;
-	    goto out;
-	  }
+      if (watch == NULL)
+        {
+          _dbus_warn ("Unable to create kqueue watch\n");
+          goto out1;
+        }
 
-	if (!_dbus_loop_add_watch (loop, watch))
-          {
-            _dbus_warn ("Unable to add reload watch to main loop");
-	    _dbus_watch_invalidate (watch);
-	    _dbus_watch_unref (watch);
-	    watch = NULL;
-	    close (kq);
-	    kq = -1;
-            goto out;
-	  }
+      if (!_dbus_loop_add_watch (loop, watch))
+        {
+          _dbus_warn ("Unable to add reload watch to main loop");
+          goto out2;
+        }
+
+      if (!_dbus_register_shutdown_func (_shutdown_kqueue, NULL))
+        {
+          _dbus_warn ("Unable to register shutdown function");
+          goto out3;
+        }
     }
 
-  ret = 1;
+  return 1;
 
+out3:
+  _dbus_loop_remove_watch (loop, watch);
+
+out2:
+  if (watch)
+    {
+      _dbus_watch_invalidate (watch);
+      _dbus_watch_unref (watch);
+      watch = NULL;
+    }
+
+out1:
+  if (kq >= 0)
+    {
+      close (kq);
+      kq = -1;
+    }
+  if (loop)
+    {
+      _dbus_loop_unref (loop);
+      loop = NULL;
+    }
+
 out:
-  return ret;
+  return 0;
 }
 
 void
@@ -169,12 +230,12 @@ bus_set_watched_dirs (BusContext *context, DBusList **
           if (dirs[j] && strcmp (new_dirs[i], dirs[j]) == 0)
             {
               new_fds[i] = fds[j];
-	      new_dirs[i] = dirs[j];
-	      fds[j] = -1;
-	      dirs[j] = NULL;
-	      break;
-	    }
-	}
+              new_dirs[i] = dirs[j];
+              fds[j] = -1;
+              dirs[j] = NULL;
+              break;
+            }
+        }
     }
 
   /* Any directory we find in "fds" with a nonzero fd must
@@ -185,10 +246,10 @@ bus_set_watched_dirs (BusContext *context, DBusList **
       if (fds[j] != -1)
         {
           close (fds[j]);
-	  dbus_free (dirs[j]);
-	  fds[j] = -1;
-	  dirs[j] = NULL;
-	}
+          dbus_free (dirs[j]);
+          fds[j] = -1;
+          dirs[j] = NULL;
+        }
     }
 
   for (i = 0; new_dirs[i]; i++)
@@ -196,9 +257,9 @@ bus_set_watched_dirs (BusContext *context, DBusList **
       if (new_fds[i] == -1)
         {
           /* FIXME - less lame error handling for failing to add a watch;
-	   * we may need to sleep.
-	   */
-          fd = open (new_dirs[i], O_RDONLY);
+           * we may need to sleep.
+           */
+          fd = open (new_dirs[i], O_RDONLY | O_CLOEXEC);
           if (fd < 0)
             {
               if (errno != ENOENT)
@@ -223,18 +284,18 @@ bus_set_watched_dirs (BusContext *context, DBusList **
               goto out;
             }
 
-	  new_fds[i] = fd;
-	  new_dirs[i] = _dbus_strdup (new_dirs[i]);
-	  if (!new_dirs[i])
+          new_fds[i] = fd;
+          new_dirs[i] = _dbus_strdup (new_dirs[i]);
+          if (!new_dirs[i])
             {
               /* FIXME have less lame handling for OOM, we just silently fail to
-	       * watch.  (In reality though, the whole OOM handling in dbus is
-	       * stupid but we won't go into that in this comment =) )
-	       */
+               * watch.  (In reality though, the whole OOM handling in dbus is
+               * stupid but we won't go into that in this comment =) )
+               */
               close (fd);
-	      new_fds[i] = -1;
-	    }
-	}
+              new_fds[i] = -1;
+            }
+        }
     }
 
   num_fds = i;

$OpenBSD: patch-lib_naughty_lua_in,v 1.7 2013/09/23 14:14:29 dcoppa Exp $
--- lib/naughty.lua.in.orig	Mon Apr  1 13:44:46 2013
+++ lib/naughty.lua.in	Mon Sep 23 15:59:56 2013
@@ -33,35 +33,39 @@ local naughty = {}
 
 --- Naughty configuration - a table containing common popup settings.
 naughty.config = {}
---- Space between popups and edge of the workarea. Default: 4
+--- Space between popups and edge of the workarea. 
+--   **Default:** `4`
 naughty.config.padding = 4
---- Spacing between popups. Default: 1
+--- Spacing between popups.
+--   **Default:** `1`
 naughty.config.spacing = 1
 --- List of directories that will be checked by getIcon()
---   Default: { "/usr/share/pixmaps/", }
-naughty.config.icon_dirs = { "/usr/share/pixmaps/", }
+--   **Default:** `{ "${LOCALBASE}/share/pixmaps/", }`
+naughty.config.icon_dirs = { "${LOCALBASE}/share/pixmaps/", }
 --- List of formats that will be checked by getIcon()
---   Default: { "png", "gif" }
+--   **Default:** `{ "png", "gif" }`
 naughty.config.icon_formats = { "png", "gif" }
 --- Callback used to modify or reject notifications.
---   Default: nil
---   Example:
---      naughty.config.notify_callback = function(args)
---          args.text = 'prefix: ' .. args.text
---          return args
---      end
+--   **Default:** `nil`
+--  @usage
+--naughty.config.notify_callback = function(args)
+--    args.text = 'prefix: ' .. args.text
+--    return args
+--end
 naughty.config.notify_callback = nil
 
 
 --- Notification Presets - a table containing presets for different purposes
 -- Preset is a table of any parameters available to notify(), overriding default
--- values (@see defaults)
+-- values.
 -- You have to pass a reference of a preset in your notify() call to use the preset
 -- The presets "low", "normal" and "critical" are used for notifications over DBUS
+--
+-- @table naughty.config.presets
 -- @field low The preset for notifications with low urgency level
 -- @field normal The default preset for every notification without a preset that will also be used for normal urgency level
 -- @field critical The preset for notifications with a critical urgency level
--- @class table
+-- @see naughty.config.defaults
 naughty.config.presets = {
     normal = {},
     low = {
@@ -76,6 +80,13 @@ naughty.config.presets = {
 
 --- Default values for the params to notify().
 -- These can optionally be overridden by specifying a preset
+-- @param timeout `5`
+-- @param text `""`
+-- @param screen `1`
+-- @param ontop `true`
+-- @param margin `"5"`
+-- @param border_width `"1"`
+-- @param position `"top_right"`
 -- @see naughty.config.presets
 -- @see naughty.notify
 naughty.config.defaults = {
@@ -100,7 +111,6 @@ local urgency = {
 -- If the rules in the filter matches the associated preset will be applied
 -- The rules object can contain: urgency, category, appname
 -- The second element is the preset
-
 naughty.config.mapping = {
     {{urgency = urgency.low}, naughty.config.presets.low},
     {{urgency = urgency.normal}, naughty.config.presets.normal},
@@ -114,13 +124,13 @@ local counter = 1
 -- True if notifying is suspended
 local suspended = false
 
---- Index of notifications per screen and position. See config table for valid
--- 'position' values. Each element is a table consisting of:
--- @field box Wibox object containing the popup
--- @field height Popup height
--- @field width Popup width
--- @field die Function to be executed on timeout
--- @field id Unique notification id based on a counter
+--- Index of notifications per screen and position. @see naughty.config table
+-- for valid 'position' values. Each element is a table consisting of:
+--   * box Wibox object containing the popup
+--   * height Popup height
+--   * width Popup width
+--   * die Function to be executed on timeout
+--   * id Unique notification id based on a counter
 naughty.notifications = { suspended = { } }
 for s = 1, capi.screen.count() do
     naughty.notifications[s] = {
@@ -157,7 +167,7 @@ end
 
 -- Evaluate desired position of the notification by index - internal
 -- @param idx Index of the notification
--- @param position top_right | top_left | bottom_right | bottom_left
+-- @param position `"top_right"` | `"top_left"` | `"bottom_right"` | `"bottom_left"`
 -- @param height Popup height
 -- @param width Popup width (optional)
 -- @return Absolute position and index in { x = X, y = Y, idx = I } table
@@ -211,8 +221,11 @@ local function arrange(screen)
 end
 
 --- Destroy notification by notification object
--- @param notification Notification object to be destroyed
+-- @tparam notification notification Notification object to be destroyed
 -- @return True if the popup was successfully destroyed, nil otherwise
+-- @usage
+--mynotification = naughty.notify({ text = "An example" })
+--naughty.destroy(mynotification)
 function naughty.destroy(notification)
     if notification and notification.box.visible then
         if suspended then
@@ -250,36 +263,37 @@ local function getById(id)
     end
 end
 
---- Create notification. args is a dictionary of (optional) arguments.
--- @param text Text of the notification. Default: ''
--- @param title Title of the notification. Default: nil
--- @param timeout Time in seconds after which popup expires.
---   Set 0 for no timeout. Default: 5
--- @param hover_timeout Delay in seconds after which hovered popup disappears.
---   Default: nil
--- @param screen Target screen for the notification. Default: 1
--- @param position Corner of the workarea displaying the popups.
---   Values: "top_right" (default), "top_left", "bottom_left", "bottom_right".
--- @param ontop Boolean forcing popups to display on top. Default: true
--- @param height Popup height. Default: nil (auto)
--- @param width Popup width. Default: nil (auto)
--- @param font Notification font. Default: beautiful.font or awesome.font
--- @param icon Path to icon. Default: nil
--- @param icon_size Desired icon size in px. Default: nil
--- @param fg Foreground color. Default: beautiful.fg_focus or '#ffffff'
--- @param bg Background color. Default: beautiful.bg_focus or '#535d6c'
--- @param border_width Border width. Default: 1
--- @param border_color Border color.
---   Default: beautiful.border_focus or '#535d6c'
--- @param run Function to run on left click. Default: nil
--- @param preset Table with any of the above parameters. Note: Any parameters
---   specified directly in args will override ones defined in the preset.
--- @param replaces_id Replace the notification with the given ID
--- @param callback function that will be called with all arguments
---  the notification will only be displayed if the function returns true
---  note: this function is only relevant to notifications sent via dbus
+--- Create notification.
+-- @param args a dictionary of (optional) arguments:
+-- @string args.text Text of the notification.
+-- @string args.title Title of the notification.
+-- @int args.timeout Time in seconds after which popup expires. Set `0` for no
+-- timeout.
+-- @int args.hover_timeout Delay in seconds after which hovered popup disappears.
+-- @int args.screen Target screen for the notification.
+-- @string args.position Corner of the workarea displaying the popups.
+-- **Values:** `"top_right"`, `"top_left"`, `"bottom_left"`, `"bottom_right"`.
+-- @bool args.ontop Boolean forcing popups to display on top.
+-- @int args.height Popup height.
+-- @int args.width Popup width.
+-- @string args.font Notification font.
+-- @string args.icon Path to icon.
+-- @int args.icon_size Desired icon size in px.
+-- @string args.fg Foreground color.
+-- @string args.bg Background color.
+-- @int args.border_width Border width.
+-- @string args.border_color Border color.
+-- @tparam function args.run Function to run on left click.
+-- @tparam table args.preset Table with any of the above parameters. Note: Any
+-- parameters specified directly in args will override ones defined in the
+-- preset.
+-- @int args.replaces_id Replace the notification with the given ID
+-- @tparam function args.callback function that will be called with all arguments the
+-- notification will only be displayed if the function returns true note: this
+-- function is only relevant to notifications sent via dbus
 -- @usage naughty.notify({ title = "Achtung!", text = "You're idling", timeout = 0 })
 -- @return The notification object
+-- @see naughty.config.defaults
 function naughty.notify(args)
     if naughty.config.notify_callback then
         args = naughty.config.notify_callback(args)

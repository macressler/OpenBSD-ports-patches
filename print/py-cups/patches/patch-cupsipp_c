$OpenBSD: patch-cupsipp_c,v 1.1 2012/08/04 14:43:10 ajacoutot Exp $

From fd985079fd7075cfc7148918bd48eeafa143cf6b Mon Sep 17 00:00:00 2001
From: Jiri Popelka <jpopelka@redhat.com>
Date: Wed, 11 Jul 2012 12:00:41 +0200
Subject: [PATCH] Use ippGet/ippSet (accessors) for IPP API.

--- cupsipp.c.orig	Tue Mar  6 11:51:17 2012
+++ cupsipp.c	Sat Jul 28 14:11:58 2012
@@ -370,18 +370,18 @@ IPPRequest_getAttributes (IPPRequest *self, void *clos
 {
   PyObject *attrs = PyList_New (0);
   ipp_attribute_t *attr;
-  for (attr = self->ipp->attrs; attr; attr = attr->next)
+  for (attr = ippFirstAttribute (self->ipp); attr; attr = ippNextAttribute(self->ipp))
     {
       PyObject *largs = NULL;
       PyObject *lkwlist = NULL;
       PyObject *values = NULL;
       IPPAttribute *attribute = NULL;
 
-      debugprintf ("%s: ", attr->name);
-      if (attr->value_tag == IPP_TAG_ZERO ||
-	  attr->value_tag == IPP_TAG_NOVALUE ||
-	  attr->value_tag == IPP_TAG_NOTSETTABLE ||
-	  attr->value_tag == IPP_TAG_ADMINDEFINE) {
+      debugprintf ("%s: ", ippGetName (attr));
+      if (ippGetValueTag (attr) == IPP_TAG_ZERO ||
+	  ippGetValueTag (attr) == IPP_TAG_NOVALUE ||
+	  ippGetValueTag (attr) == IPP_TAG_NOTSETTABLE ||
+	  ippGetValueTag (attr) == IPP_TAG_ADMINDEFINE) {
 	debugprintf ("no value\n");
       } else {
 	PyObject *value = NULL;
@@ -392,25 +392,25 @@ IPPRequest_getAttributes (IPPRequest *self, void *clos
 	if (!values)
 	  goto fail_add;
 
-	for (i = 0; i < attr->num_values; i++) {
-	  switch (attr->value_tag) {
+	for (i = 0; i < ippGetCount (attr); i++) {
+	  switch (ippGetValueTag (attr)) {
 	  case IPP_TAG_INTEGER:
 	  case IPP_TAG_ENUM:
 	  case IPP_TAG_RANGE:
-	    value = PyInt_FromLong (attr->values[i].integer);
-	    debugprintf ("i%d", attr->values[i].integer);
+	    value = PyInt_FromLong (ippGetInteger (attr, i));
+	    debugprintf ("i%d", ippGetInteger (attr, i));
 	    break;
 
 	  case IPP_TAG_BOOLEAN:
-	    value = PyBool_FromLong (attr->values[i].boolean);
-	    debugprintf ("b%d", attr->values[i].integer);
+	    value = PyBool_FromLong (ippGetBoolean (attr, i));
+	    debugprintf ("b%d", ippGetInteger (attr, i));
 	    break;
 
 	  case IPP_TAG_TEXT:
-	    value = PyUnicode_Decode (attr->values[i].string.text,
-				      strlen (attr->values[i].string.text),
+	    value = PyUnicode_Decode (ippGetString (attr, i, NULL),
+				      strlen (ippGetString (attr, i, NULL)),
 				      "utf-8", NULL);
-	    debugprintf ("u%s", attr->values[i].string.text);
+	    debugprintf ("u%s", ippGetString (attr, i, NULL));
 	    break;
 
 	  case IPP_TAG_NAME:
@@ -419,14 +419,14 @@ IPPRequest_getAttributes (IPPRequest *self, void *clos
 	  case IPP_TAG_MIMETYPE:
 	  case IPP_TAG_CHARSET:
 	  case IPP_TAG_LANGUAGE:
-	    value = PyString_FromString (attr->values[i].string.text);
-	    debugprintf ("s%s", attr->values[i].string.text);
+	    value = PyString_FromString (ippGetString (attr, i, NULL));
+	    debugprintf ("s%s", ippGetString (attr, i, NULL));
 	    break;
 
 	  default:
 	    value = NULL;
 	    unknown_value_tag = 1;
-	    debugprintf ("Unable to encode value tag %d\n", attr->value_tag);
+	    debugprintf ("Unable to encode value tag %d\n", ippGetValueTag (attr));
 	  }
 
 	  if (!value)
@@ -458,15 +458,15 @@ IPPRequest_getAttributes (IPPRequest *self, void *clos
 
       if (values) {
 	largs = Py_BuildValue ("(iisO)",
-			       attr->group_tag,
-			       attr->value_tag,
-			       attr->name,
+			       ippGetGroupTag (attr),
+			       ippGetValueTag (attr),
+			       ippGetName (attr),
 			       values);
 	Py_DECREF (values);
 	values = NULL;
       } else
-	largs = Py_BuildValue ("(iis)", attr->group_tag, attr->value_tag,
-			       attr->name ? attr->name : "");
+	largs = Py_BuildValue ("(iis)", ippGetGroupTag (attr), ippGetValueTag (attr),
+			       ippGetName (attr) ? ippGetName (attr) : "");
 
       if (!largs)
 	goto fail_add;

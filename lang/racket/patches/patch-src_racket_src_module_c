$OpenBSD: patch-src_racket_src_module_c,v 1.1 2013/10/16 19:22:37 juanfra Exp $

Upstream's commit message:
"OpenBSD provides pthread_stackseg_np(), which directly reports
the stack-bounds information that Racket needs, so we can use
that instead of the approach used on other Unix variants. The
approach used for other Unix variants seems not to work for OpenBSD
because the stack location at the point that main() is called
is already significantly far from the stack base (on the order
of 100k on a 32-bit system in my test using OpenBSD 5.2)."

Test: racket -e '(load "deep.rktl")'

https://github.com/plt/racket/pull/316
https://github.com/plt/racket/commit/3a9ad7746b6f53f68dbdc55493baf7528b524422

--- src/racket/src/module.c.orig	Sat Aug 10 00:38:27 2013
+++ src/racket/src/module.c	Tue Oct 15 20:14:39 2013
@@ -28,7 +28,7 @@
 #include "schmach.h"
 #include "schexpobs.h"
 
-#define MIN(l,o) ((l) < (o) ? (l) : (o))
+#define mz_MIN(l,o) ((l) < (o) ? (l) : (o))
 
 /* globals */
 SHARED_OK Scheme_Object *(*scheme_module_demand_hook)(int, Scheme_Object **);
@@ -3612,7 +3612,7 @@ int scheme_resolved_module_path_value_matches(Scheme_O
   else if (SCHEME_BYTE_STRINGP(rmp_val) && SCHEME_SYMBOLP(o)) {
     return !strncmp(SCHEME_BYTE_STR_VAL(rmp_val), 
                     SCHEME_SYM_VAL(o), 
-                    MIN(SCHEME_BYTE_STRLEN_VAL(rmp_val), SCHEME_SYM_LEN(o)));
+                    mz_MIN(SCHEME_BYTE_STRLEN_VAL(rmp_val), SCHEME_SYM_LEN(o)));
   }  else {
     scheme_arg_mismatch("scheme_resolved_module_path_value_matches", 
                         "internal error: unknown type of resolved_module_path_value",

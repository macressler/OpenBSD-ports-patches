$OpenBSD: patch-tests_runner_runner_vala,v 1.1 2013/03/19 09:21:22 ajacoutot Exp $

rhbz#892063

--- tests/runner/runner.vala.orig	Tue Aug 21 17:08:23 2012
+++ tests/runner/runner.vala	Tue Mar 19 10:10:32 2013
@@ -51,8 +51,15 @@ void backup_setup()
   Environment.set_variable("DEJA_DUP_TOOLS_PATH", "../../tools/duplicity", true);
   Environment.set_variable("DEJA_DUP_TEST_MOCKSCRIPT", Path.build_filename(dir, "mockscript"), true);
   Environment.set_variable("XDG_CACHE_HOME", cachedir, true);
-  Environment.set_variable("PATH", "./mock:" + Environment.get_variable("PATH"), true);
+  Environment.set_variable("PATH",
+                           "./mock:" +
+                             Environment.get_variable("DEJA_DUP_TEST_PATH"),
+                           true);
 
+  var tempdir = Path.build_filename(dir, "tmp");
+  DejaDup.ensure_directory_exists(tempdir);
+  Environment.set_variable("DEJA_DUP_TEMPDIR", tempdir, true);
+
   var settings = DejaDup.get_settings();
   settings.set_string(DejaDup.BACKEND_KEY, "file");
   settings = DejaDup.get_settings(DejaDup.FILE_ROOT);
@@ -61,11 +68,9 @@ void backup_setup()
 
 void backup_teardown()
 {
-  var path = Environment.get_variable("PATH");
-  if (path.has_prefix("./mock:")) {
-    path = path.substring(7);
-    Environment.set_variable("PATH", path, true);
-  }
+  Environment.set_variable("PATH",
+                           Environment.get_variable("DEJA_DUP_TEST_PATH"),
+                           true);
 
   var file = File.new_for_path(Environment.get_variable("DEJA_DUP_TEST_MOCKSCRIPT"));
   if (file.query_exists(null)) {
@@ -112,14 +117,22 @@ string default_args(BackupRunner br, Mode mode = Mode.
 
   var archive = tmp_archive ? "?" : "%s/deja-dup".printf(cachedir);
 
+  string enc_str = "";
+  if (!encrypted)
+    enc_str = "--no-encryption ";
+
+  var tempdir = Path.build_filename(test_home, "tmp");
+
+  var end_str = "%s'--verbosity=9' '--gpg-options=--no-use-agent' '--archive-dir=%s' '--tempdir=%s' '--log-fd=?'".printf(enc_str, archive, tempdir);
+
   if (mode == Mode.CLEANUP)
-    return "cleanup '--force' 'file://%s' '--gio' %s'--verbosity=9' '--gpg-options=--no-use-agent' '--archive-dir=%s' '--log-fd=?'".printf(backupdir, encrypted ? "" : "'--no-encryption' ", archive);
+    return "cleanup '--force' 'file://%s' '--gio' %s".printf(backupdir, end_str);
   else if (mode == Mode.RESTORE)
-    return "'restore' '--gio' '--force' 'file://%s' '%s' %s'--verbosity=9' '--gpg-options=--no-use-agent' '--archive-dir=%s' '--log-fd=?'".printf(backupdir, restoredir, encrypted ? "" : "'--no-encryption' ", archive);
+    return "'restore' '--gio' '--force' 'file://%s' '%s' %s".printf(backupdir, restoredir, end_str);
   else if (mode == Mode.VERIFY)
-    return "'restore' '--file-to-restore=%s/deja-dup/metadata' '--gio' '--force' 'file://%s' '%s/deja-dup/metadata' %s'--verbosity=9' '--gpg-options=--no-use-agent' '--archive-dir=%s' '--log-fd=?'".printf(cachedir.substring(1), backupdir, cachedir, encrypted ? "" : "'--no-encryption' ", archive);
+    return "'restore' '--file-to-restore=%s/deja-dup/metadata' '--gio' '--force' 'file://%s' '%s/deja-dup/metadata' %s".printf(cachedir.substring(1), backupdir, cachedir, end_str);
   else if (mode == Mode.LIST)
-    return "'list-current-files' '--gio' 'file://%s' %s'--verbosity=9' '--gpg-options=--no-use-agent' '--archive-dir=%s' '--log-fd=?'".printf(backupdir, encrypted ? "" : "'--no-encryption' ", archive);
+    return "'list-current-files' '--gio' 'file://%s' %s".printf(backupdir, end_str);
 
   string source_str = "";
   if (mode == Mode.DRY || mode == Mode.BACKUP)
@@ -129,10 +142,6 @@ string default_args(BackupRunner br, Mode mode = Mode.
   if (mode == Mode.DRY)
     dry_str = "--dry-run ";
 
-  string enc_str = "";
-  if (!encrypted)
-    enc_str = "--no-encryption ";
-
   string args = "";
 
   if (br.is_full && !br.is_first && (mode == Mode.BACKUP || mode == Mode.DRY))
@@ -147,7 +156,7 @@ string default_args(BackupRunner br, Mode mode = Mode.
     string[] excludes1 = {"~/Downloads", "~/.local/share/Trash", "~/.xsession-errors", "~/.thumbnails", "~/.Private", "~/.gvfs", "~/.adobe/Flash_Player/AssetCache"};
 
     var user = Environment.get_user_name();
-    string[] excludes2 = {"/home/.ecryptfs/%s/.Private".printf(user), "/sys", "/proc", "/tmp"};
+    string[] excludes2 = {"/home/.ecryptfs/%s/.Private".printf(user), "/sys", "/proc", tempdir};
 
     foreach (string ex in excludes1) {
       ex = ex.replace("~", Environment.get_home_dir());
@@ -166,7 +175,7 @@ string default_args(BackupRunner br, Mode mode = Mode.
     args += "'--exclude=%s/deja-dup' '--exclude=%s' '--exclude=**' ".printf(cachedir, cachedir);
   }
 
-  args += "%s%s'--gio' %s'file://%s' %s'--verbosity=9' '--gpg-options=--no-use-agent' '--archive-dir=%s' '--log-fd=?'".printf(extra, dry_str, source_str, backupdir, enc_str, archive);
+  args += "%s%s'--gio' %s'file://%s' %s".printf(extra, dry_str, source_str, backupdir, end_str);
 
   return args;
 }
@@ -175,6 +184,8 @@ class BackupRunner : Object
 {
   public delegate void OpCallback (DejaDup.Operation op);
   public DejaDup.Operation op = null;
+  public string path = null;
+  public string script = null;
   public string? init_error = null;
   public bool success = true;
   public bool cancelled = false;
@@ -188,6 +199,12 @@ class BackupRunner : Object
 
   public void run()
   {
+    if (script != null)
+      run_script(script);
+
+    if (path != null)
+      Environment.set_variable("PATH", path, true);
+
     string header, msg;
     if (!DejaDup.initialize(out header, out msg)) {
       if (header + "\n" + msg != init_error)
@@ -298,9 +315,13 @@ void add_to_mockscript(string contents)
 string replace_keywords(string in)
 {
   var home = Environment.get_home_dir();
+  var mockdir = "./mock";
   var cachedir = Environment.get_variable("XDG_CACHE_HOME");
   var test_home = Environment.get_variable("DEJA_DUP_TEST_HOME");
+  var path = Environment.get_variable("PATH");
   return in.replace("@HOME@", home).
+         replace("@MOCK_DIR@", mockdir).
+         replace("@PATH@", path).
          replace("@XDG_CACHE_HOME@", cachedir).
          replace("@TEST_HOME@", test_home);
 }
@@ -351,6 +372,10 @@ void process_operation_block(KeyFile keyfile, string g
     br.error_detail = keyfile.get_string(group, "ErrorDetail");
   if (keyfile.has_key(group, "Passphrases"))
     br.passphrases = keyfile.get_integer(group, "Passphrases");
+  if (keyfile.has_key(group, "Path"))
+    br.path = replace_keywords(keyfile.get_string(group, "Path"));
+   if (keyfile.has_key(group, "Script"))
+    br.script = replace_keywords(keyfile.get_string(group, "Script"));
   if (keyfile.has_key(group, "Settings")) {
     var settings_list = keyfile.get_string_list(group, "Settings");
     var settings = DejaDup.get_settings();
@@ -449,10 +474,15 @@ void process_duplicity_run_block(KeyFile keyfile, stri
     };
   }
 
-  if (script != null)
-    dupscript += "\n" + "SCRIPT: " + script;
-  else if (mode == Mode.VERIFY)
-    dupscript += "\n" + "SCRIPT: mkdir -p %s/deja-dup/metadata; echo 'This folder can be safely deleted.\\n0' > %s/deja-dup/metadata/README".printf(cachedir, cachedir);
+  var verify_script = "mkdir -p %s/deja-dup/metadata && echo 'This folder can be safely deleted.\\n0' > %s/deja-dup/metadata/README".printf(cachedir, cachedir);
+  if (mode == Mode.VERIFY)
+    dupscript += "\n" + "SCRIPT: " + verify_script;
+  if (script != null) {
+    if (mode == Mode.VERIFY)
+      dupscript += " && " + script;
+    else
+      dupscript += "\n" + "SCRIPT: " + script;
+  }
 
   if (passphrase)
     dupscript += "\n" + "PASSPHRASE: test";
@@ -522,6 +552,10 @@ int main(string[] args)
   if (args.length > 1)
     script = args[1];
   Environment.set_variable("DEJA_DUP_TEST_SCRIPT", script, true);
+
+  // Save PATH, as tests might reset it on us
+  Environment.set_variable("DEJA_DUP_TEST_PATH",
+                           Environment.get_variable("PATH"), true);
 
   var parts = script.split("/");
   var suitename = parts[parts.length - 2];

$OpenBSD: patch-spec_unit_provider_package_openbsd_spec_rb,v 1.4 2013/08/14 07:48:05 jasper Exp $

From a5b8b96f703d932b90ce7461b18076bb32ee85b3 Mon Sep 17 00:00:00 2001
From: Jasper Lievisse Adriaanse <jasper@humppa.nl>
Date: Tue, 23 Jul 2013 16:55:55 +0200
Subject: [PATCH] Enhance OpenBSD pkg.conf handling

From ee14796e05bb05a6829644827e510b2b8e8076d4 Mon Sep 17 00:00:00 2001
From: Jasper Lievisse Adriaanse <jasper@humppa.nl>
Date: Thu, 1 Aug 2013 17:32:46 +0200
Subject: [PATCH] (22023) Implement :purgeable feature for OpenBSD package provider

From 19b0e78df7e010f0af111fda083fd7f87499f952 Mon Sep 17 00:00:00 2001
From: Jasper Lievisse Adriaanse <jasper@humppa.nl>
Date: Wed, 31 Jul 2013 12:20:15 +0200
Subject: [PATCH] (22004) Fix regex for retrieving flavor.

From 1b672b5d6c7e8976b3a79d52e8db5d0823f61144 Mon Sep 17 00:00:00 2001
From: Jasper Lievisse Adriaanse <jasper@humppa.nl>
Date: Wed, 31 Jul 2013 11:33:58 +0200
Subject: [PATCH] (22021) Implement (un)install_options for OpenBSD package provider.

--- spec/unit/provider/package/openbsd_spec.rb.orig	Fri Jul 12 02:15:45 2013
+++ spec/unit/provider/package/openbsd_spec.rb	Wed Aug 14 09:44:16 2013
@@ -62,6 +62,16 @@ describe provider_class do
       provider_class.instances.map(&:name).sort.should ==
         %w{bash bzip2 expat gettext libiconv lzo openvpn python vim wget}.sort
     end
+
+    it "should return all flavors if set" do
+      fixture = File.read(my_fixture('pkginfo_flavors.list'))
+      provider_class.expects(:execpipe).with(%w{/bin/pkg_info -a}).yields(fixture)
+      instances = provider_class.instances.map {|p| {:name => p.get(:name),
+        :ensure => p.get(:ensure), :flavor => p.get(:flavor)}}
+      instances.size.should == 2
+      instances[0].should == {:name => 'bash', :ensure => '3.1.17',  :flavor => 'static'}
+      instances[1].should == {:name => 'vim',  :ensure => '7.0.42', :flavor => 'no_x11'}
+    end
   end
 
   context "#install" do
@@ -184,7 +194,29 @@ describe provider_class do
       provider.install
     end
 
-    %w{ installpath installpath= }.each do |line|
+    it "should append installpath" do
+      urls = ["ftp://your.ftp.mirror/pub/OpenBSD/5.2/packages/amd64/",
+              "http://another.ftp.mirror/pub/OpenBSD/5.2/packages/amd64/"]
+      lines = ["installpath  = #{urls[0]}\n",
+               "installpath += #{urls[1]}\n"]
+
+      expect_read_from_pkgconf(lines)
+      expect_pkgadd_with_env_and_name(urls.join(":")) do
+        provider.install
+      end
+    end
+
+    it "should handle append on first installpath" do
+      url = "ftp://your.ftp.mirror/pub/OpenBSD/5.2/packages/amd64/"
+      lines = ["installpath += #{url}\n"]
+
+      expect_read_from_pkgconf(lines)
+      expect_pkgadd_with_env_and_name(url) do
+        provider.install
+      end
+    end
+
+    %w{ installpath installpath= installpath+=}.each do |line|
       it "should reject '#{line}'" do
         expect_read_from_pkgconf([line])
         expect {
@@ -224,6 +256,57 @@ describe provider_class do
       provider.resource[:name] = 'zsh'
       provider.expects(:pkginfo).with('zsh').returns('')
       provider.query.should be_nil
+    end
+  end
+
+  context "#install_options" do
+    it "should return nill by default" do
+      provider.install_options.should be_nil
+    end
+
+    it "should return install_options when set" do
+      provider.resource[:install_options] = ['-n']
+      provider.resource[:install_options].should == ['-n']
+    end
+
+    it "should return multiple install_options when set" do
+      provider.resource[:install_options] = ['-L', '/opt/puppet']
+      provider.resource[:install_options].should == ['-L', '/opt/puppet']
+    end
+
+    it 'should return install_options when set as hash' do
+      provider.resource[:install_options] = { '-Darch' => 'vax' }
+      provider.install_options.should == ['-Darch=vax']
+    end
+  end
+  
+  context "#uninstall_options" do
+    it "should return nill by default" do
+      provider.uninstall_options.should be_nil
+    end
+
+    it "should return uninstall_options when set" do
+      provider.resource[:uninstall_options] = ['-n']
+      provider.resource[:uninstall_options].should == ['-n']
+    end
+
+    it "should return multiple uninstall_options when set" do
+      provider.resource[:uninstall_options] = ['-q', '-c']
+      provider.resource[:uninstall_options].should == ['-q', '-c']
+    end
+
+    it 'should return uninstall_options when set as hash' do
+      provider.resource[:uninstall_options] = { '-Dbaddepend' => '1' }
+      provider.uninstall_options.should == ['-Dbaddepend=1']
+    end
+  end
+  
+  context "#uninstall" do
+    describe 'when uninstalling' do
+      it 'should use erase to purge' do
+        provider.expects(:pkgdelete).with('-c', '-q', 'bash')
+        provider.purge
+      end
     end
   end
 end
